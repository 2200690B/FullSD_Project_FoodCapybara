@page "/currentcart"
@attribute [Authorize]
@inject HttpClient _client
@inject NavigationManager _navManager


<h3>Shopping Cart Items</h3>


@if (OrderItems == null)
{
    <div class="alert alert-info">Loading OrderItems...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>OI Id</th>
                <th>Food Id</th>
                <th>Food Name</th>
                <th>OI Quantity</th>
                @* <th>OrderID</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var oi in OrderItems)
            {
                <tr>
                    <td>@oi.Id</td>
                    <td>@oi.Food.Id</td>
                    <td>@oi.Food.FoodName</td>
                    <td>@oi.OIQuantity</td>
                    
                </tr>
            }
        </tbody>
    </table>

@* @if (ShoppingCart != null && ShoppingCart.Any())
{
    <ul>
        @foreach (var item in ShoppingCart)
        {
            <li>@item.FoodID - Quantity: @item.OIQuantity</li>
        }
    </ul>
}
else
{
    <p>Your shopping cart is empty.</p>
} *@

@code {
    private List<Food>? Foods = new();
    private List<OrderItem>? OrderItems= new();

    protected async override Task OnInitializedAsync()
    {
        OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}");
    }







    //Use cascading parameters to pass the shopping cart state from 
    //IndividualRestaurants.razor to cart.razor
    // [Parameter] public List<OrderItem> ShoppingCart { get; set; }
    // //private List<OrderItem> ShoppingCart = new List<OrderItem>();

    // Order order = new Order();

    // protected async override Task OnInitializedAsync()
    // {
    //     ShoppingCart = new List<OrderItem>();
    //     // Other initialization code...
    // }

    // private async Task CreateOrder()
    // {
    //     if (ShoppingCart != null && ShoppingCart.Any())
    //     {   // Create an order based on the items in the shopping cart
    //         order.OrderItems = ShoppingCart.ToList();

    //         // Call the API to create an order
    //         var response = await _client.PostAsJsonAsync(Endpoints.OrdersEndpoint, order);

    //         if (response.IsSuccessStatusCode)
    //         {   // Reset the shopping cart after successfully creating the order
    //             ShoppingCart.Clear();
    //         }
    //         else
    //         {
    //             // Handle the case where order creation fails
    //             // You might want to add error handling logic here
    //         }
    //     }
    //     else
    //     {
    //         // Handle the case where the shopping cart is empty
    //     }
    }
    

    

}
