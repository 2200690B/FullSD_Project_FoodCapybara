@page "/search/{Id:int}"
@attribute [Authorize]
@inject HttpClient _client
@inject NavigationManager _navManager


<BackContentComponent Target="search" />


<div class="container">
    <div class="row">
        <div class="col-9">
            <img class="w-100" src="img/restaurantImages/@Restaurants.RestImage" />

            <h1>@Restaurants.RestName</h1>
            <h3>@Restaurants.RestAddress</h3>
            <p>@Restaurants.RestDescription</p>
        </div>
    </div>
</div>

@if (Foods == null)
{
    <div class="alert alert-info">Loading Foods...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Foods</th>
                <th>Description</th>
                <th>Cost</th>
                <th>Cart</th>
                <th>Cost added</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var food in Foods)
            {
                @if (@Id == food.RestId)
                {
                    <tr>
                        <td>
                            @food.FoodName
                        </td>
                        <td>@food.FoodDesc</td>
                        <td>$@food.FoodCost</td>
                            @* href="/orderitem and adding to cart" *@
                        <td>
                            <a class="btn btn-primary" @onclick="() => IncrementCount(food.Id)">
                                @* passing parameters in the method *@
                                <span class="oi oi-plus"></span>
                            </a>
                            <a class="status">
                                @GetCountForFood(food.Id)
                            </a>
                            <a class="btn btn-primary" @onclick="() => DecrementCount(food.Id)">
                                <span class="oi oi-minus"></span>
                            </a>
                            
                            
                        </td>
                        <td>
                            $@GetPriceForItem(food.Id)
                        </td>


                    </tr>
                }
                
            }
        </tbody>
    </table>
}
@* session state such that it temporarily stores data (shopping cart) during customer's session online *@'

<div>
     <a class="btn btn-primary" @onclick="() => AddToCart()">
        <span class="oi oi-cart"></span> Add To Cart
    </a>
</div>



@code {
    [Parameter] public int Id { get; set; }
    Restaurant Restaurants = new Restaurant();
    private List<Food>? Foods = new();

    private Dictionary<int, int> foodCounts = new Dictionary<int, int>();
    private List<OrderItem> ShoppingCart = new List<OrderItem>(); 

    OrderItem orderitem = new OrderItem();


    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<Restaurant>($"{Endpoints.RestaurantsEndpoint}/{Id}");
        Foods = await _client.GetFromJsonAsync<List<Food>>($"{Endpoints.FoodsEndpoint}");

        foodCounts.Clear();

        // Initialize counts for each food
        if (foodCounts.Count == 0)      //checks if food dictionary is empty and has not been initialized yet
        {
            foreach (var food in Foods)
            {
                foodCounts[food.Id] = 0;    //initialise
            }
        }
    }

    private async void  AddToCart()
    {
        // Add the current state of foodCounts to the Cart (OrderItem) kvp -> key-value-pair
        foreach (var kvp in foodCounts)
        {
            if (kvp.Value > 0)  //those w pos quant, creates a new OrderItem & adds to ShoppingCart list
            {
                // Create a new OrderItem
                var orderItem = new OrderItem { FoodID = kvp.Key, OIQuantity = kvp.Value };

                // Send the OrderItem to the server
                await _client.PostAsJsonAsync(Endpoints.OrderItemsEndpoint, orderItem);

                // Add the created OrderItem to the ShoppingCart list
                ShoppingCart.Add(orderItem);
            }   //shopping cart = temporary collection
        }
        //ResetCounts();  // Reset the counts to 0
        _navManager.NavigateTo("/currentcart");
    }



    
    private decimal GetPriceForItem(int foodID)
    {
        // Retrieve the corresponding Food object based on foodID
        var food = Foods.FirstOrDefault(f => f.Id == foodID);

        if (food != null)
        {   // Calculate the total price by multiplying quantity (count) with the cost
            return food.FoodCost * GetCountForFood(foodID);
        }
        else
        {   // Handle the case where the food with the given ID is not found
            return 0;

        }
    }

    private void IncrementCount(int foodId)
    {
        if (!foodCounts.ContainsKey(foodId))
        {
            foodCounts[foodId] = 1; // Initialize count to 1 if the key is not present
        }
        else
        {
            foodCounts[foodId]++;
        }
    }

    private int GetCountForFood(int foodId)
    {
        return foodCounts.ContainsKey(foodId) ? foodCounts[foodId] : 0;
        //checks if foodCounts dictionary contains the specified key (foodId)
        // If key is present in dictionary = returns true
        //if true, code after ? before : runs 
    }
    private void DecrementCount(int foodId)
    {
        if (foodCounts.ContainsKey(foodId) && foodCounts[foodId] > 0)
        {
            foodCounts[foodId]--;
        }
    }

    private void ResetCounts()
    {
        // Reset the counts to 0 after saving to session
        foreach (var food in Foods)
        {
            foodCounts[food.Id] = 0;
        }
    }


    


}
 