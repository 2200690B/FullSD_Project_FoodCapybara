@page "/search/{Id:int}"
@attribute [Authorize]
@inject HttpClient _client
@inject NavigationManager _navManager


<BackContentComponent Target="search" />


<div class="container">
    <div class="row">
        <div class="col-9">
            <img class="w-100" src="img/restaurantImages/@Restaurants.RestImage" />

            <h1>@Restaurants.RestName</h1>
            <h3>@Restaurants.RestAddress</h3>
            <p>@Restaurants.RestDescription</p>
        </div>
    </div>
</div>

@if (Foods == null)
{
    <div class="alert alert-info">Loading Foods...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Foods</th>
                <th>Restaurant</th>
                <th>Cost</th>
                <th>Rating</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var food in Foods)
            {
                @if (@Id == food.RestId)
                {
                    <tr>
                        <td>@food.FoodName</td>
                        <td>@food.Restaurant.RestName</td>
                        <td>$@food.FoodCost</td>
                        <td>@food.FoodRating</td>
                        <td>@food.FoodDesc</td>

                    </tr>
                }
                
            }
        </tbody>
    </table>
}


@code {
    [Parameter] public int Id { get; set; }
    Restaurant Restaurants = new Restaurant();
    private List<Food>? Foods = new();


    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<Restaurant>($"{Endpoints.RestaurantsEndpoint}/{Id}");
        Foods = await _client.GetFromJsonAsync<List<Food>>($"{Endpoints.FoodsEndpoint}");
        //restaurants = Restaurants.Where(x => x.Id == id).FirstOrDefault();
    }

    
}
